package com.niit.dao;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.niit.model.BillingAddress;
import com.niit.model.Supplier;

public class BillingAddressDaoIml implements BillingAddressDao{

	@Autowired
	private SessionFactory sessionFactory;

	public BillingAddressDaoIml(SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;

		}

	@Transactional
		public void saveOrUpdate(BillingAddress billingAddress) {
			sessionFactory.getCurrentSession().saveOrUpdate(billingAddress);

		}

	

	@Transactional
		public void delete(String id) {
		BillingAddress supToDelete = new BillingAddress();
			supToDelete.setBillingAddress_id(id);
			sessionFactory.getCurrentSession().delete(supToDelete);

		}

	@Transactional
		public BillingAddress get(String id) {

			// sessionFactory.getCurrentSession().get(BillingAddress.class,id);
			String hql = "from BillingAddress where billingAddress_id=" + "'" + id + "'";
			Query query =(Query) sessionFactory.getCurrentSession().createQuery(hql);
			List<BillingAddress> listSupplier = (List<BillingAddress>) query.getResultList();
			if (listSupplier != null && !listSupplier.isEmpty()) {
				return listSupplier.get(0);
			}
			return null;
		}

	@Transactional
		public List<BillingAddress> list() {
			@SuppressWarnings("unchecked")
			List<BillingAddress> listSupplier = (List<BillingAddress>) sessionFactory.getCurrentSession()
			.createCriteria(BillingAddress.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();
			return listSupplier;
		}
}
