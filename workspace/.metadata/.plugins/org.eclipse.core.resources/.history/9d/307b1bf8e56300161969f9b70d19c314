package com.niit.controller;

import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.niit.dao.CartDao;
import com.niit.dao.CartItemDao;
import com.niit.dao.CategoryDao;
import com.niit.dao.CustomerDao;
import com.niit.dao.ProductDao;
import com.niit.dao.SupplierDao;
import com.niit.model.Cart;
import com.niit.model.CartItem;
import com.niit.model.Category;
import com.niit.model.Customer;
import com.niit.model.Product;
import com.niit.model.Supplier;

@Controller
public class CartController {

	@Autowired
	private ProductDao productDao;
	@Autowired
	private Product product;
	@Autowired
	private Category category;
	@Autowired
	private CategoryDao categoryDao;
	@Autowired
	private Supplier supplier;
	@Autowired
	private SupplierDao supplierDao;
	@Autowired
	private Cart cart;
	@Autowired
	private CartItem cartItem;
	@Autowired
	private CartDao cartDao;
	@Autowired
	private CartItemDao cartItemDao;
	@Autowired
	private Customer customer;
	@Autowired
	private CustomerDao customerDao;
	
	@RequestMapping("/cart/addToCart/{product_id}")
	public String addToCart(@PathVariable("product_id") String product_id, Model model, Principal principal) {
		//1.get the customer name
		
		String user=principal.getName();
		
		System.out.println(user);
        
		customer=customerDao.getCustomerByUserName(user);
       // 2.get the customer 
		String id=customer.getCustomerId();
        System.out.println(id);
        
        
      // 3. assign cart to the customer  
        cart = new Cart();
        cart.setCustomerId(id);
      //  cart=cartDao.getCartByCustomerId(id);
        
      //4.select from product  
        product = productDao.get(product_id);
    
        
        //5.insert items into database
        // if cart is not  available
        if((cart=cartDao.getCartByCustomerId(id))==null){
        cart=new Cart();
        cart.setCustomerId(customer.getCustomerId());
        cart.setGrandTotal(product.getUnit_price());
        cart.setNoOfproduct(1);
        cartDao.saveOrUpdate(cart);
        }
        
        
       //6.insert into database
        if(addCartItem(id ,product_id,model)==null)
        cartItem.setCart_id(cart.getCart_id());
        cartItem.setCustomerId(id);
        cartItem.setProduct_id(product_id);
        cartItem.setQuantity(1);
        cartItem.setTotalPrice(product.getUnit_price());
        cartItemDao.persist(cartItem);
      
        // if productIs available then
       
      
      
        
       List<CartItem> listOfProduct=cartItemDao.getCartItemsByCustomerId(id);
       double grandTotal= 0.0 ; 
       for(CartItem item: listOfProduct){
    	   grandTotal=grandTotal+item.getTotalPrice();
       }
       cart.setCart_id(cart.getCart_id());
       cart.setCustomerId(id);
       cart.setGrandTotal(grandTotal);
       int size=listOfProduct.size();
       cart.setNoOfproduct(size);
       cartDao.saveOrUpdate(cart);
       
		return "redirect:/productShow/{product_id}";
		
		
		
		
	}

	private String addCartItem(String id, String product_id, Model model) {
		 List<CartItem> productList=cartItemDao.getCartItemsByCustomerId(id);
	        for(CartItem itemCart:productList){
	        String itemProduct_id=itemCart.getProduct_id();
	        if(itemProduct_id.equals(product.getProduct_id())){
	     	   itemCart.setCartItem_id(itemCart.getCartItem_id());
	     	   itemCart.setCart_id(itemCart.getCart_id());
	     	   itemCart.setCustomerId(id);
	     	   itemCart.setProduct_id(itemProduct_id);
	     	   itemCart.setQuantity(itemCart.getQuantity()+1);
	     	   itemCart.setTotalPrice(itemCart.getTotalPrice()+product.getUnit_price());
	     	   cartItemDao.saveOrUpdate(itemCart);
	     	   return "redirect:/productShow/{product_id}";
	        }
	        
	        }
		return null;
	}

	
	
}
